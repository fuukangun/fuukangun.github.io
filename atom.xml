<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fuukangun</title>
  <subtitle>最初的梦想是成为第一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-09T16:03:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fuukangun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solr学习:managed-schema详解</title>
    <link href="http://yoursite.com/2017/03/09/Solr%E5%AD%A6%E4%B9%A0-managed-schema%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/03/09/Solr学习-managed-schema详解/</id>
    <published>2017-03-09T14:47:31.000Z</published>
    <updated>2017-03-09T16:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>本文很大程度借鉴抄袭转载自：<a href="http://www.cnblogs.com/langfanyun/tag/Solr/" target="_blank" rel="external">一剑侵心的博客:关于Solr学习的那部分</a></p>
<p>在公司自己搭建Solr玩的时候，因为用的JDK是1.7版本的，所以安装了Solr5.3.1(大概是这个版本吧，记不清了，也可能是4.x的)。当时的配置文件叫schema.xml，搞得我一开始没找到配置文件，还以为在官网下了一个假Solr。结果Solr不知道从5.x版本开始，虽然配置文件还是xml格式，但是改名叫managed-schema，还是不带后缀的那种，简直了。</p>
<p>其实managed-schema的格式简单来看就是下面这个样子的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"example"</span> <span class="attr">version</span>=<span class="string">"1.6"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">field</span>/&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">dynamicField</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">uniqueKey</span>&gt;</span>id<span class="tag">&lt;/<span class="name">uniqueKey</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">copyField</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">fieldType</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h1 id="field元素"><a href="#field元素" class="headerlink" title="field元素"></a>field元素</h1></blockquote>
<h2 id="特殊之处"><a href="#特殊之处" class="headerlink" title="特殊之处"></a>特殊之处</h2><p>field用来配置document中的字段，类似于数据库中的column。但是这里有三个特殊一点的字段，分别是：_version_, _root_ 和 id。</p>
<h3 id="version"><a href="#version" class="headerlink" title="_version_"></a>_version_</h3><p>如果去除此字段，必须同时去掉solrconfig.xml中的update log。_version_ and update log 在SolrCloud中是必须的。作用类似于hibernate中的version字段，用于乐观锁。</p>
<h3 id="root"><a href="#root" class="headerlink" title="_root_"></a>_root_</h3><p>如果document中内嵌document，此需要此字段。用于内嵌的document指向其父document。</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>除非你有很充足的理由，否则不要去除”id”字段。不要改变type属性， 不要对<uniquekey>对应的字段进行索引时分析。</uniquekey></p>
<h2 id="field元素的属性"><a href="#field元素的属性" class="headerlink" title="field元素的属性"></a>field元素的属性</h2><table>
<thead>
<tr>
<th>属性名称</th>
<th>默认值</th>
<th>属性说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td></td>
<td>必填</td>
</tr>
<tr>
<td>type</td>
<td></td>
<td>必填，值必须定义在<fieldtype>中</fieldtype></td>
</tr>
<tr>
<td>indexed</td>
<td>true</td>
<td>是否进行索引。 true的时候进行索引。</td>
</tr>
<tr>
<td>stored</td>
<td>true</td>
<td>是否存储。如果此字段的值需要显示在搜索结果中，则需要进行存储。</td>
</tr>
<tr>
<td>docValues</td>
<td>fasle</td>
<td>是否需要存储docValues。true为设置。docValues用于提升sorting, faceting, grouping, function queries等性能，现在仅支持StrField, UUIDFiel和所有的Trie*Field，此值为true的字段要求此字段 multiValued=false，并且 (required=true或设置了default的值)。</td>
</tr>
<tr>
<td>multiValued</td>
<td>fasle</td>
<td>是否有多个值。</td>
</tr>
<tr>
<td>omitNorms</td>
<td></td>
<td>如果你的大部分的document的长度大小都差不多，则设置成true。如果此字段在索引时需要boost，则设置为false。</td>
</tr>
<tr>
<td>termVectors</td>
<td>fasle</td>
<td>设置为true，使More Like This特性生效，会极大的增加索引文件的大小。</td>
</tr>
<tr>
<td>termPositions</td>
<td>fasle</td>
<td>通常用于提高高亮搜索结果这一功能的性能。设置为true，会增加索引文件的大小。</td>
</tr>
<tr>
<td>termOffsets</td>
<td>fasle</td>
<td>通常用于提高高亮搜索结果这一功能的性能。设置为true，会增加索引文件的大小。</td>
</tr>
<tr>
<td>termPayloads</td>
<td>fasle</td>
<td>通常用于提高高亮搜索结果这一功能的性能。设置为true，会增加索引文件的大小。</td>
</tr>
<tr>
<td>required</td>
<td>fasle</td>
<td>是否为必填值。 如果设置为true，则索引时，如果此字段值为null，则会报错。如果是字符串，亲测使用””也会报错。</td>
</tr>
<tr>
<td>default</td>
<td></td>
<td>这个field的默认值。</td>
</tr>
</tbody>
</table>
<blockquote>
<h1 id="dynamicField元素"><a href="#dynamicField元素" class="headerlink" title="dynamicField元素"></a>dynamicField元素</h1></blockquote>
<p>动态字段 属性配置上与常规字段没啥区别，最大的区别是name的属性上可以进行通配，比如说name=”*_i”，那么只要是后面带i的字段都是符合的。这样就不怕一些字段无法匹配无法写入。</p>
<blockquote>
<h1 id="uniqueKey元素"><a href="#uniqueKey元素" class="headerlink" title="uniqueKey元素"></a>uniqueKey元素</h1></blockquote>
<p>类似于数据库中的主键。配置文件默认的是<uniquekey>id</uniquekey>。我们在数据库设计时，虽然不强制每个表有主键，但是一般情况下还是会设置一个主键的。同样这个元素也不是必须的，但是强烈建议设置此值。</p>
<blockquote>
<h1 id="copyField"><a href="#copyField" class="headerlink" title="copyField"></a>copyField</h1></blockquote>
<p>假设有这样一个需求：根据书名或者作者名查询图书馆的图书。如果在数据库中，我们可以写成select * from book where author like `%东野圭吾%` or book_name like `%东野圭吾%`。但是在Solr中没有这样的语法。所以，我们需要把author字段和book_name字段拷贝到一个新字段中，通过这个字段来实现上面的需求。写法如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">index</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">multiValues</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"author"</span> <span class="attr">dest</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"book_name"</span> <span class="attr">dest</span>=<span class="string">"text"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>这样我们就只需要搜索text里的内容就可以了。</p>
<p><font color="#DC143C">注意：如果dest由多个source构成，就需要将其指定为multiValued。</font></p>
<blockquote>
<h1 id="fieldType"><a href="#fieldType" class="headerlink" title="fieldType"></a>fieldType</h1></blockquote>
<p>fieldType主要定义了一些字段类型，其name属性值用于前面<field>中的type属性的值。e.g. <fieldtype name="string" class="solr.StrField" sortmissinglast="true"> 其中class属性中”solr”是org.apache.solr.schema这个包名的缩写。</fieldtype></field></p>
<p>fieldType的属性：</p>
<ol>
<li>name  由字母、数字和下划线组成。不能以数字开头。此值用于前面<field>中的type属性的值。</field></li>
<li>class  此值表明索引并存储此fieldType的数据的类型（e.g 字符类型，数字类型，日期类型…）。如果此类不是solr提供的（自定义的或第三方的类），则不能用”solr.”，需要写类的全路径名。</li>
<li>positionIncrementGap 值为整数，用于multiValued=”true”的字段，指定多个值之间的距离，以防出现假的短语匹配。<br> 比如描述书本作者的字段是有多个值的，假设有两个作者：John Smith 和 Mike Jackson，我们搜索”Smith Mike”这个作者，如果positionIncrementGap值设成0，则此记录就会被认为是匹配搜索条件的，实际上是不匹配的。对于这种情况，我们应该把此值设置成一个较大的值，比如100。</li>
<li><p>autoGeneratePhaseQueries 值为布尔类型。默认值为false。设为true时，会自动生成短语查询。<br> 举个粟子：索引中的文本内容为：春花秋月何时了…一江春水向东流。    我们在搜索的输入框里输入”春花”（注意不输入两个双引号），如果autoGeneratePhaseQueries 为true，我们加上highlight的话，返回的匹配结果为： <em>春花</em>春花秋月何时了…一江春水向东流。     如果值为false，则返回结果为<em>春</em><em>花</em>春花秋月何时了…一江<em>春</em>水向东流。</p>
<p> 如果值为false，我们还是想要进行短语查询，可在输入框里输入”春花”(注意需要加上两个双引号)。</p>
</li>
<li><p>docValuesFormat 自定义docValues的格式。设置此值的话，必须在solrconfig.xml里配置schema-aware codec。如：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">codecFactory</span> <span class="attr">class</span>=<span class="string">"solr.SchemaCodecFactory"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p> 在网上搜了一下，只看到有两个值 Memory 和 Disk。猜想这个属性的作用应该是定义docValues值是存在硬盘上还是存在内存中吧。</p>
</li>
<li><p>postingsFormat 自定义PostingsFormat。设置此值的话，必须在solrconfig.xml里配置schema-aware codec。不太清楚具体有什么用。</p>
<p> 注：尽量不要使用docValuesFormat和postingFormat。Solr的guideline上有一段话，翻译如下：</p>
<p>仅当使用默认的codec 时，Lucene索引才支持向后兼容。因此，如果使用了这两个属性，那么将来想要升级到更高版本的Solr 时，需要你切换回默认的codec，然后优化现有的索引或者重新建立整个索引。</p>
</li>
</ol>
<p>以下的属性也同时存在于<field>里，如果<field>里的值会覆盖<fieldtype>里的值。</fieldtype></field></field></p>
<ol>
<li>indexed 布尔值。true表示进行索引。</li>
<li>stored 布尔值。true表示进行存储。</li>
<li>docValues 布尔值。true表示field的值将会被存储于面向列的数据结构中。</li>
<li>sortMissingFirst 布尔值。true表示排序的时候，此field值为空的记录排在此field值不为空的记录的前面。</li>
<li>sortMissingLast 布尔值 。意思和sortMissingFirst相反。</li>
<li>multiValues 布尔值。</li>
<li>omitNorms 布尔值。</li>
<li>omitTermFreqAndPositions 布尔值。忽略term frequency, positions 和 payloads。所有非文本类型字段，此默认值是true。</li>
<li>omitPositions 布尔值。布尔值。忽略positions。</li>
<li>termVectors， termPositions， termOffsets 和 termPayloads 布尔值。</li>
<li>required 布尔值。</li>
<li>useDocValuesAsStored 布尔值。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      其实不管用什么工具，配置文件都是需要讲解一下，虽然在上一篇文章中schema相关的被我一笔带过了。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Solr学习:为Solr添加数据</title>
    <link href="http://yoursite.com/2017/03/04/Solr%E5%AD%A6%E4%B9%A0-%E4%B8%BASolr%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/03/04/Solr学习-为Solr添加数据/</id>
    <published>2017-03-04T14:48:57.000Z</published>
    <updated>2017-03-09T15:05:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h1 id="schema配置简介"><a href="#schema配置简介" class="headerlink" title="schema配置简介"></a>schema配置简介</h1></blockquote>
<p>为什么此处只做一个简介，而不是放一篇详解上来？因为本文主要讲解如何为Solr添加数据，对于schema配置的详解，不是重点。想要了解清楚的各位，可以自行查询，网上很多关于schema的详解。或者也可以直接参看相关的官方wiki：<a href="https://wiki.apache.org/solr/SchemaXml" target="_blank" rel="external">链接直达</a></p>
<ol>
<li>把Solr的一个Core当作数据库的一张表，那么其schema就相当于这个表的表结构设计。（本人刚刚接触Solr，如果表述有误，欢迎指正）也就是说，在添加数据之前，我们得先设计好表结构。</li>
<li>那么，schema的配置文件在哪呢？其实就在solr_home/solr/fuukangun（此处是你的Core name）/conf下找到managed-schema（之前的版本是schema.xml文件）。</li>
<li>打开managed-schema文件，我们可以看到里面默认配置了很多filed，也就是说默认了很多字段。你可以将里面的filed全删除，配上你想要的字段。但是值得注意的是，类似_version_和_root_这种带下划线的字段，是系统保留字段，可以不删除，但建议你的数据库中，表字段不要类似命名。<img src="https://olwqv7o0u.qnssl.com/image/schema.png" alt="managed-schema"></li>
<li><p>由于已经有默认配置了，那么我在这里就直接用原本自带的部分字段好了。这里选用id，sku，name三个字段，将其他的field注释或删除。看这几个field名称，应该是用来存储商品信息的。</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"sku"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">omitNorms</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<h1 id="在Solr控制台添加数据"><a href="#在Solr控制台添加数据" class="headerlink" title="在Solr控制台添加数据"></a>在Solr控制台添加数据</h1></blockquote>
<ol>
<li>在Solr控制台选择核心以后，点击下方的Documents按钮。Solr上一条数据可以看成是一个Document。<img src="https://olwqv7o0u.qnssl.com/image/documentsAdd.png" alt="Documents"></li>
<li>Document Type可以选择很多，我在这里选择了JSON。然后在下面填入JSON格式的数据，点击Submit Document。右下角显示Status: success就表示数据添加成功了。我们也可以在这里添加一个数组的对象，不一定要一个个添加。</li>
</ol>
<blockquote>
<h1 id="进行数据查询"><a href="#进行数据查询" class="headerlink" title="进行数据查询"></a>进行数据查询</h1></blockquote>
<p>选择左边菜单栏里面的Query，点击最下面的Execute Query按钮就会在右边出现查询结果了。上面的q输入框内，就是输入查询条件的，*:*就是检索所有条件的。比如我们这个索引只有三个字段：id，sku，name。我们根据name模糊查询的话，可以写成name:雀巢*。*的作用，类似于MySQL中的%。当然，我们也可以精确查询。另外一些设置这里不在简述。<br><img src="https://olwqv7o0u.qnssl.com/image/query.png" alt=""></p>
<font color="#DC143C">1. 问题出现</font>

<p>但是，在点击了Execute Query按钮之后，界面上并没有出现任何数据。于是通过调试，我在控制台发现了服务器400的错误。<br><img src="https://olwqv7o0u.qnssl.com/image/resultSolr.png" alt=""><br>个人怀疑是Tomcat上解析URL出错了，我把URL复制下来，粘贴到浏览器的地址栏，把%2F修改为/。结果成功获得了刚刚添加过的数据。<br><img src="https://olwqv7o0u.qnssl.com/image/urlResult.png" alt=""></p>
<font color="#DC143C">2. 解决方式</font>

<p>找到Tomcat/conf目录下的catalina.properties文件，在最下面添加如下代码：org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true<br>重启Tomcat，就能使Tomcat正确解析出URL了。</p>
<font color="#DC143C">3. 结果查看</font>

<p>然后我们再进一次Solr控制台，就能看到搜索结果了。<img src="https://olwqv7o0u.qnssl.com/image/fixResult.png" alt=""></p>
<blockquote>
<h1 id="从MySQL导入数据到Solr"><a href="#从MySQL导入数据到Solr" class="headerlink" title="从MySQL导入数据到Solr"></a>从MySQL导入数据到Solr</h1></blockquote>
<p>解决了上面的问题，我们继续来尝试一下如何从数据库导入数据到Solr。</p>
<ol>
<li>首先在数据库建立相同格式的表，并在表里加几条数据。<br><img src="https://olwqv7o0u.qnssl.com/image/mysqlData.png" alt=""></li>
<li><p>要想Solr连接数据库，需要两个jar包：</p>
<ul>
<li>mysql-connector-java-5.1.41-bin.jar（这个不需要多说，没有的可以自行下载）</li>
<li><p>solr-5.5.0/dist目录下，solr-dataimporthandler-5.5.0.jar</p>
<p>将这两个包，拷贝到Tomcat\webapps\solr\WEB-INF\lib目录下。</p>
</li>
</ul>
</li>
<li><p>配置solr_home/solr/yourCore/conf目录下的solrconf.xml文件。在<requesthandler name="/select" class="solr.SearchHandler">前面上加上一个dataimport的处理的Handler</requesthandler></p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">"/dataimport"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.handler.dataimport.DataImportHandler"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"defaults"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"config"</span>&gt;</span>data-config.xml<span class="tag">&lt;/<span class="name">str</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">lst</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">requestHandler</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在同目录下，创建data-config.xml文件</p>
<ul>
<li>dataSource是数据库数据源。</li>
<li>Entity就是一张表对应的实体，pk是主键，query是查询语句。</li>
<li><p>Field对应一个字段，column是数据库里的column名，后面的name属性对应着Solr的Filed的名字。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JdbcDataSource"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">url</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/solr_data"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span> <span class="attr">batchSize</span>=<span class="string">"-1"</span> /&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">document</span> <span class="attr">name</span>=<span class="string">"goods"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"goods"</span> <span class="attr">pk</span>=<span class="string">"id"</span></span></div><div class="line">                <span class="attr">query</span>=<span class="string">"select * from goods"</span>&gt;</div><div class="line">　　　       <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">　　　       <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"sku"</span> <span class="attr">name</span>=<span class="string">"sku"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">　　　  <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;/<span class="name">document</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>重启Tomcat，在Solr控制台，选择Dataimport，点击Execute从MySQL导入数据。可能需要稍微等几秒，点击Refresh Status刷新倒入状态，出现下图，表示数据导入成功。<br><img src="https://olwqv7o0u.qnssl.com/image/dataImport.png" alt=""></p>
</li>
<li>点击Query查询数据</li>
</ol>
<p>但是原本我们通过控制台添加的数据消失了，这是因为我们在上一步点击Execute导入数据时，勾选了clean的缘故。<br><img src="https://olwqv7o0u.qnssl.com/image/queryMySQL.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      作为一个搜索引擎，没数据搜什么？所以本文讲述如何为自己搭建Solr添加数据。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Solr学习:Core配置</title>
    <link href="http://yoursite.com/2017/02/25/Solr%E5%AD%A6%E4%B9%A0-Core%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/02/25/Solr学习-Core配置/</id>
    <published>2017-02-25T13:58:00.000Z</published>
    <updated>2017-02-25T16:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>上回说到，如何搭建Solr5.5.0，进入Solr控制台。但是，可以看到，此时控制台左边Core选择栏，显示的是<font color="#DC143C">No cores available</font>。也就是说，Solr从5.X开始就不提供默认的Core了，而需要我们自行配置。本文就讲述如何配置第一个Core。<br><img src="https://olwqv7o0u.qnssl.com/image/Solr-index.png" alt="没有Core的Solr控制台"></p>
<blockquote>
<h1 id="配置年轻人的第一个Core"><a href="#配置年轻人的第一个Core" class="headerlink" title="配置年轻人的第一个Core"></a>配置年轻人的第一个Core</h1></blockquote>
<ol>
<li>首先，进入你原来配置的solr_home/solr目录下，创建一个文件夹，命名成你的CoreName。比如我创建了fuukangunCore。</li>
<li>接着，将solr_home/configsets/sample_techproducts_configs下的conf文件夹拷贝到solr_home/solr/fuukangunCore文件夹里。</li>
<li>然后，启动Tomcat，进入Solr控制台，点击左边的No cores available，然后Add Core。在name和instanceDir中填入你的CoreName。比如笔者就要填入fuukangunCore。<font color="#DC143C">注：Solr Core的命名有一定规范，具体可自行百度</font></li>
<li>最后，原本的No cores available就变成了Core Selector，在此可以选择你的Core。你也可以创建更多的Core。<font color="#DC143C">现在，你的Core目录下，应该多了core.properties文件和data文件夹。data文件夹式用于存储索引文件的，而core.properties文件则存放了Core的一些配置信息。</font></li>
</ol>
<p>但是虽然我们有了Core，依旧缺少核心的东西，就是数据。下一次，我将会介绍如何配置Core的schema和从MySQL导入数据。</p>
]]></content>
    
    <summary type="html">
    
      动手搭建年轻人的第一个Solr Core
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Solr学习:Solr5.5.0搭建</title>
    <link href="http://yoursite.com/2017/02/24/Solr%E5%AD%A6%E4%B9%A0-Solr5-5-0%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/02/24/Solr学习-Solr5-5-0搭建/</id>
    <published>2017-02-24T14:58:37.000Z</published>
    <updated>2017-03-03T16:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>最近在工作上，由于DB使用了Cobar进行分库，所以表关联无法得以实现，需要在Solr上来进行一些复杂的查询。而且即便不进行分库，DB操作也不建议大数据量的多表进行关联查询，尤其是那种4、5张大表进行join的操作。然后顺带学习和了解一下Solr。</p>
<p><font color="#DC143C">需要注意的是Solr6以上版本需要JDK8，Solr5以上版本需要JDK7。</font></p>
<blockquote>
<h1 id="Solr搭建"><a href="#Solr搭建" class="headerlink" title="Solr搭建"></a>Solr搭建</h1></blockquote>
<ol>
<li><a href="http://lucene.apache.org/solr/" target="_blank" rel="external">下载Solr 5.5.0</a>，并解压到当前目录下。</li>
<li><a href="http://tomcat.apache.org/" target="_blank" rel="external">下载Tomcat</a>，此处我用的是Tomcat8.5.11。</li>
<li>将solr-5.5.0/server/solr-webapp下的webapp文件夹拷贝到Tomcat/webapps下，<font color="#DC143C">并将拷贝过来的webapp重命名成solr。</font>（此处建议先把Tomcat/webapps下内容全部清空）</li>
<li>把solr-5.5.0/server/lib/ext中的jar包复制到Tomcat/webapps/solr/WEB-INF/lib目录中。</li>
<li>在任意位置新建solr_home文件夹，我建立在/Users/fuukangun路径下。把solr-5.5.0/server下的solr文件夹，拷贝到刚刚创建的solr_home文件夹下。<font color="#DC143C">solr_home就是之后创建索引实例Core的需要的目录</font></li>
<li>把solr-5.5.0/server/resources下的log4j.properties文件拷贝到Tomcat/webapps/solr/WEB-INF/classes目录下（classes不存在需要手动创建）</li>
<li><p>打开Tomcat/webapps/solr/WEB-INF下的web.xml文件。找到下面的配置内容，配置solr_home，一开始应该是被注释掉了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;env-entry&gt;</div><div class="line">       &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</div><div class="line">       &lt;env-entry-value&gt;/put/your/solr/home/here&lt;/env-entry-value&gt;</div><div class="line">       &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</div><div class="line"> &lt;/env-entry&gt;</div></pre></td></tr></table></figure>
<p>将env-entry-value值替换为/Users/fuukangun/solr_home/solr，保存。</p>
</li>
</ol>
<p>启动Tomcat，在浏览器输入<a href="http://localhost:8080/solr/index.html#/" target="_blank" rel="external">http://localhost:8080/solr/index.html#/</a> 就能出现Solr控制台了。<br><img src="https://olwqv7o0u.qnssl.com/image/Solr-index.png" alt="Solr控制台"></p>
]]></content>
    
    <summary type="html">
    
      本文讲述如何在macOS上搭建Solr5.5.0，至于为什么不用最新的Solr6，那是因为工作中用的是Solr5的版本。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
  </entry>
  
</feed>
